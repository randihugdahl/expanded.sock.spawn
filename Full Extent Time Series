# Load required libraries
library(readxl)
library(tidyverse)
library(ggplot2)
library(zoo) # For interpolation

test.auc.allinone <- function(day, count, res.time){
  data.frame(day, count) %>% 
    add_row(day = 0, count = 0) %>% 
    add_row(day = 364, count = 0) %>% 
    arrange(day) %>% 
    mutate(survey = seq(1, length(day), by = 1)) %>%  
    mutate(day.x1 = lead(day, 1) - res.time) %>% 
    mutate(day.x2 = lead(day, 1) - lead(count, 1) / (abs(lead(count, 2) - lead(count, 1)) / (lead(day, 2) - lead(day, 1)))) %>% 
    mutate(day = ifelse(day %in% 0, pmax(day.x1, day.x2, na.rm = TRUE), day)) %>% 
    mutate(day.x3 = lag(day, 1) + res.time) %>% 
    mutate(day.x4 = lag(day, 1) - lag(count, 1) / (abs(lag(count, 2) - lag(count, 1)) / (lag(day, 2) - lag(day, 1)))) %>% 
    mutate(day = ifelse(day %in% last(day), pmin(day.x3, day.x4, na.rm = TRUE), day)) %>% 
    select(-c(day.x1, day.x2, day.x3, day.x4)) %>% 
    mutate(day_1 = lag(day)) %>% 
    mutate(count_1 = lag(count)) %>%
    mutate(int = day - day_1) %>% 
    mutate(fish_days = c(NA, diff(day) * zoo::rollmean(count, 2))) %>% 
    summarize(fish_days = sum(na.omit(fish_days))) %>% 
    mutate(auc = fish_days / res.time) %>% 
    select(auc)
}

# Import and process data
nanika.sils <- read_xlsx("RH_SILs.toreview-nanikaSKCH2004-2024.xlsx", na = "NA")

# Filter dataset to include only observations where proportion.surveyed = 1
Nanika.auc <- nanika.sils %>%
  dplyr::filter(StreamId %in% 428, proportion.surveyed == 1, Inspection.Year != 2017) %>%  # Remove 2017
  dplyr::select(StreamId, StreamName, Inspection.Year, SilDate, Observer,
                Affiliation, TargetSockeye, PrimaryInspMode, Sock_AL_HoldOutside,
                Sock_AL_Hold, Sock_AL_Spawning, Sock_AL_ObsTotal,
                Sock_AL_EstTotal, Sock_AL_New, Sock_AL_EstReliability,
                Sock_AL_FishCountability, Sock_AD_Obs, Sock_AD_Est,
                Sock_AD_.PreSpawnMort, obs.eff, surveyed.full.extent,
                proportion.surveyed, barriers.present, reach2_sk_spawners) %>%
  mutate(julian = yday(SilDate), 
         obs.eff = ifelse(!is.na(obs.eff), obs.eff, 0.8),   
         expanded = Sock_AL_Spawning / obs.eff)  # Use correct column for expanded spawners

# Recalculate AUC with only `proportion.surveyed = 1`
residence_times <- c(14.25)

Nanika.auc.recalc <- Nanika.auc %>%
  tidyr::expand_grid(res.time = residence_times) %>%
  dplyr::group_by(Inspection.Year, res.time) %>%
  dplyr::summarize(auc = test.auc.allinone(day = julian, count = expanded, res.time = unique(res.time)) %>% pull(auc),
                   .groups = "drop")

# Interpolate missing values (including 2017)
Nanika.auc.recalc <- Nanika.auc.recalc %>%
  mutate(auc = na.approx(auc, x = Inspection.Year, na.rm = FALSE))

# Identify interpolated points
interpolated_years <- c(2017)  # We are focusing on 2017, but this can include other interpolated values if needed
Nanika.auc.recalc <- Nanika.auc.recalc %>%
  mutate(is_interpolated = Inspection.Year %in% interpolated_years)

# Save results to CSV
write.csv(Nanika.auc.recalc, "KP.yearly.escapement.prop1new.csv", row.names = FALSE)

# Plot AUC estimates, highlighting interpolated 2017 point in red
plot.new.calc.Nanika <- ggplot(Nanika.auc.recalc, aes(x = Inspection.Year, y = auc, color = is_interpolated)) +
  geom_line(color = "black", size = 1) +  # Black line for all values
  geom_point(aes(color = is_interpolated), size = 3) +  # Highlight interpolated points
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red"), labels = c("Observed", "Interpolated")) +
  scale_x_continuous(breaks = seq(2004, 2024, 2)) +
  scale_y_continuous(limits = c(0, 27000), breaks = seq(0, 27000, 5000)) +
  labs(color = "Point Type", y = "AUC Estimate", x = "Year") +
  theme_minimal()

plot.new.calc.Nanika
